name: Pull Request checks

on:
  pull_request:
    # we can't do that, because status are required
    # see https://stackoverflow.com/questions/66751567/return-passing-status-on-github-workflow-when-using-paths-ignore
    # paths-ignore:
    #   - "**.md"
    #   - ".github/CODEOWNERS"
    #   - ".github/PULL_REQUEST_TEMPLATE.md"
    #   - ".editorconfig"
  push:
    branches:
    - main

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  filter:
    name: "Filter changed paths"
    runs-on: ubuntu-latest
    outputs:
      code_modified: ${{ steps.filter.outputs.code_modified }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get changed files
        uses: step-security/changed-files@v46
        id: changed_files

      - name: Filter non-markdown and non-docs files
        id: filter
        run: ./.github/scripts/path-filter.sh "${{ steps.changed_files.outputs.all_changed_files }}"

  lint:
    name: üïµÔ∏è‚Äç‚ôÄÔ∏è NPM lint
    needs: filter
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && needs.filter.outputs.code_modified == 'true'
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 1
    - uses: actions/setup-node@v4
      with:
        node-version: '24.x'
        cache: 'npm'
        cache-dependency-path: 'package-lock.json'
    - name: gulp build
      run: make front_build
    - name: lint
      run: make front_lint

  # this will build the docker image and upload as an artifact for following jobs
  build_backend:
    name: üèó Build backend dev image for tests
    needs: filter
    runs-on: ubuntu-latest
    if: ((github.event_name == 'push' && github.ref == 'refs/heads/main') || github.event_name == 'pull_request') && needs.filter.outputs.code_modified == 'true'

    steps:
      - uses: actions/checkout@v4
        with:
          # needs depth to run git log below
          fetch-depth: 50
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver: docker-container
          use: true

        # Restore BuildKit cache from previous builds
      - name: Restore BuildKit cache
        uses: actions/cache@v4
        with:
          # Cache key based on files that trigger Docker rebuild (from path-filter logic)
          key: ${{ runner.os }}-docker-${{ hashFiles('Dockerfile*', 'docker-compose.yml', 'docker/**', 'cpanfile*', 'conf/apache*') }}
          restore-keys: |
            ${{ runner.os }}-docker-
          path: /tmp/.buildx-cache
          # Enable compression for faster cache restoration
          enableCrossOsArchive: false

      # Restore taxonomies cache
      - uses: actions/cache@v4
        id: cache
        with:
          path: ./build-cache
          key: taxonomies-${{ hashFiles('taxonomies/**') }}
          restore-keys: taxonomies-

      - name: Build backend image with cache
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          build-args: |
            USER_UID=1000
            USER_GID=1000
            CPANMOPTS=--with-develop
          # Multi-layer caching strategy for maximum performance
          cache-from: |
            type=local,src=/tmp/.buildx-cache
            type=gha
          cache-to: |
            type=local,dest=/tmp/.buildx-cache-new,mode=max
            type=gha,mode=max
          load: true                   # loads the image into local docker daemon
          tags: openfoodfacts-server/backend:dev

      - name: push backend image as artifact
        uses: ishworkh/container-image-artifact-upload@v2.0.0
        with:
          image: "openfoodfacts-server/backend:dev"

      # Prepare cache for next run
      - name: Prepare cache for next run
        if: always()
        run: |
          rm -rf /tmp/.buildx-cache
          if [ -d /tmp/.buildx-cache-new ]; then
            mv /tmp/.buildx-cache-new /tmp/.buildx-cache
          fi

      - name: Setup Git and Restore Taxonomies
        run: ./.github/scripts/setup_git.sh

      - name: Rebuild taxonomies for Open Food Facts (off)
        run: make DOCKER_LOCAL_DATA="$(pwd)" build_taxonomies GITHUB_TOKEN="${{ secrets.TAXONOMY_CACHE_GITHUB_TOKEN }}"

      - name: Rebuild taxonomies for Open Beauty Facts (obf)
        run: |
          source env/setenv.sh obf
          make DOCKER_LOCAL_DATA="$(pwd)" build_taxonomies GITHUB_TOKEN="${{ secrets.TAXONOMY_CACHE_GITHUB_TOKEN }}"

      - name: Rebuild taxonomies for Open Products Facts (opf)
        run: |
          source env/setenv.sh opf
          make DOCKER_LOCAL_DATA="$(pwd)" build_taxonomies GITHUB_TOKEN="${{ secrets.TAXONOMY_CACHE_GITHUB_TOKEN }}"

      - name: Rebuild taxonomies for Open Pet Food Facts (opff)
        run: |
          source env/setenv.sh opff
          make DOCKER_LOCAL_DATA="$(pwd)" build_taxonomies GITHUB_TOKEN="${{ secrets.TAXONOMY_CACHE_GITHUB_TOKEN }}"

  check_perl:
    name: üê™ Check Perl
    needs: [filter, build_backend]
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && needs.filter.outputs.code_modified == 'true'
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 1
    - name: Setup Git and Restore Taxonomies
      run: ./.github/scripts/setup_git.sh
    - uses: actions/cache/restore@v4
      id: cache
      with:
        path: ./build-cache
        key: taxonomies-${{ hashFiles('taxonomies/**') }}
        restore-keys: taxonomies-
    - name: Download backend image from artifacts
      id: downloadbackendimage
      uses: ishworkh/container-image-artifact-download@v2.1.0
      with:
        image: "openfoodfacts-server/backend:dev"
        download_tmp_dir: ${{ runner.temp }}
    - name: build taxonomies (should use cache)
      run: make DOCKER_LOCAL_DATA="$(pwd)" build_taxonomies GITHUB_TOKEN="${{ secrets.TAXONOMY_CACHE_GITHUB_TOKEN }}"
    - name: check taxonomies
      run: make check_taxonomies
    - name: check perltidy
      run: make check_perltidy
    - name: check perlcritic
      run: make check_critic
    - name: check perl
      run: make check_perl

  unit_tests:
    name: üê™ Perl Unit Tests
    needs: [filter, build_backend]
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && needs.filter.outputs.code_modified == 'true'
    strategy:
      fail-fast: false
      matrix:
        test-group: [1, 2, 3, 4, 5, 6]
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 1
    - uses: actions/cache/restore@v4
      id: cache
      with:
        path: ./build-cache
        key: taxonomies-${{ hashFiles('taxonomies/**') }}
        restore-keys: taxonomies-
    - name: Setup Git and Restore Taxonomies
      run: ./.github/scripts/setup_git.sh
    - name: Download backend image from artifacts
      id: downloadbackendimage
      uses: ishworkh/container-image-artifact-download@v2.0.0
      with:
        image: "openfoodfacts-server/backend:dev"       
    # downloadbackendimage task loads the image into docker and keeps the original file.
    # As our runs tend to hit the storage limits for GitHub Actions, manually delete the
    # downloaded file for now. It's not needed after being loaded into docker.
    - name: Remove downloaded image
      env:
        FILE: "${{ steps.downloadbackendimage.outputs.download_path }}"
      run: rm $FILE
    - name: Build taxonomies for tests
      run: make DOCKER_LOCAL_DATA="$(pwd)" build_taxonomies_test GITHUB_TOKEN="${{ secrets.TAXONOMY_CACHE_GITHUB_TOKEN }}"
    - name: Build language files for tests
      run: make DOCKER_LOCAL_DATA="$(pwd)" build_lang_test GITHUB_TOKEN="${{ secrets.TAXONOMY_CACHE_GITHUB_TOKEN }}"
    - name: Run unit test group ${{ matrix.test-group }}
      run: |
        make codecov_prepare
        make COVER_OPTS='-e HARNESS_PERL_SWITCHES="-MDevel::Cover=+ignore,tests/"' DOCKER_LOCAL_DATA="$(pwd)" unit_test_group TEST_GROUP=${{ matrix.test-group }} GITHUB_TOKEN="${{ secrets.TAXONOMY_CACHE_GITHUB_TOKEN }}"
    - name: generate coverage results
      # even if tests failed
      if: always()
      run: |
        make coverage_txt
        make codecov
    - uses: codecov/codecov-action@v5
      if: always()
      with:
        files: cover_db/codecov.json
        token: ${{ secrets.CODECOV_TOKEN }}
    - name: Upload test results to Codecov
      if: ${{ !cancelled() }}
      uses: codecov/test-results-action@v1
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        files: ./tests/unit/outputs/junit_group_${{ matrix.test-group }}.xml

  integration_tests:
    name: üê™ Perl Integration Tests
    needs: [filter, build_backend]
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && needs.filter.outputs.code_modified == 'true'
    strategy:
      fail-fast: false
      matrix:
        test-group: [1, 2, 3, 4, 5, 6, 7, 8, 9]
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 1
    - uses: actions/cache/restore@v4
      id: cache
      with:
        path: ./build-cache
        key: taxonomies-${{ hashFiles('taxonomies/**') }}
        restore-keys: taxonomies-
    - name: Setup Git and Restore Taxonomies
      run: ./.github/scripts/setup_git.sh
    - name: Download backend image from artifacts
      id: downloadbackendimage
      uses: ishworkh/container-image-artifact-download@v2.0.0
      with:
        image: "openfoodfacts-server/backend:dev"       
    # downloadbackendimage task loads the image into docker and keeps the original file.
    # As our runs tend to hit the storage limits for GitHub Actions, manually delete the
    # downloaded file for now. It's not needed after being loaded into docker.
    - name: Remove downloaded image
      env:
        FILE: "${{ steps.downloadbackendimage.outputs.download_path }}"
      run: rm $FILE
    - name: Build taxonomies for tests
      run: make DOCKER_LOCAL_DATA="$(pwd)" build_taxonomies_test GITHUB_TOKEN="${{ secrets.TAXONOMY_CACHE_GITHUB_TOKEN }}"
    - name: Build language files for tests
      run: make DOCKER_LOCAL_DATA="$(pwd)" build_lang_test GITHUB_TOKEN="${{ secrets.TAXONOMY_CACHE_GITHUB_TOKEN }}"
    - name: Run integration test group ${{ matrix.test-group }}
      run: |
        make codecov_prepare
        make COVER_OPTS='-e HARNESS_PERL_SWITCHES="-MDevel::Cover=+ignore,tests/"' DOCKER_LOCAL_DATA="$(pwd)" integration_test_group TEST_GROUP=${{ matrix.test-group }} GITHUB_TOKEN="${{ secrets.TAXONOMY_CACHE_GITHUB_TOKEN }}"
    - name: generate coverage results
      # even if tests failed
      if: always()
      run: |
        make coverage_txt
        make codecov
    - uses: codecov/codecov-action@v5
      if: always()
      with:
        files: cover_db/codecov.json
        token: ${{ secrets.CODECOV_TOKEN }}
    - name: Upload test results to Codecov
      if: ${{ !cancelled() }}
      uses: codecov/test-results-action@v1
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        files: ./tests/integration/outputs/junit_group_${{ matrix.test-group }}.xml
    
  tests_dev:
    name: üß™ Test make dev
    needs: [filter, build_backend]  # build_backend - only to avoid building taxonomies
    if: github.event_name == 'pull_request' && needs.filter.outputs.code_modified == 'true'
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 1
    - uses: actions/cache/restore@v4
      id: cache
      with:
        path: ./build-cache
        key: taxonomies-${{ hashFiles('taxonomies/**') }}
        restore-keys: taxonomies-
    - name: Download backend image from artifacts
      id: downloadbackendimage
      uses: ishworkh/container-image-artifact-download@v2.1.0
      with:
        image: "openfoodfacts-server/backend:dev"
        download_tmp_dir: ${{ runner.temp }}
    - name: set right UID and GID in .envrc
      run: |
        rm -f .envrc
        echo "export USER_UID=$(id -u)" >> .envrc
        echo "export USER_GID=$(id -g)" >> .envrc
    - name: Test make dev
      run: |
        make DOCKER_LOCAL_DATA="$(pwd)" SKIP_SAMPLE_IMAGES=1 dev_no_build
        make status
    - name: Test all is running
      run: make livecheck || ( tail -n 300 logs/apache2/*error*log; docker compose logs; false )
    - name: test clean
      run: make hdown

  test_deployment:
    name: ü¶æ Some test of deployment tools
    needs: filter
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && needs.filter.outputs.code_modified == 'true'
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 1
    - name: verify apache2 envvars is correct
      run: |
        env/setenv.sh off;
        sh -c ". conf/apache-2.4/off-envvars"
        sh -c "APACHE_CONFDIR=/etc/apache2-priority; . conf/apache-2.4/off-envvars"
