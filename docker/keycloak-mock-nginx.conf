server {
    listen 8080;
    server_name localhost;

    # Health check endpoint
    location /health {
        return 200 'OK';
        add_header Content-Type text/plain;
    }

    # Mock OIDC discovery endpoint
    location /.well-known/openid-configuration {
        return 200 '{
            "issuer": "http://keycloak:8080/realms/open-products-facts",
            "authorization_endpoint": "http://keycloak:8080/realms/open-products-facts/protocol/openid-connect/auth",
            "token_endpoint": "http://keycloak:8080/realms/open-products-facts/protocol/openid-connect/token",
            "jwks_uri": "http://keycloak:8080/realms/open-products-facts/protocol/openid-connect/certs"
        }';
        add_header Content-Type application/json;
    }

    # Mock token endpoint - return a dummy token
    location /realms/open-products-facts/protocol/openid-connect/token {
        return 200 '{
            "access_token": "mock-token",
            "token_type": "Bearer",
            "expires_in": 3600
        }';
        add_header Content-Type application/json;
    }

    # Mock admin users endpoint - return empty array
    location /admin/realms/open-products-facts/users {
        if ($request_method = GET) {
            return 200 '[]';
        }
        if ($request_method = DELETE) {
            return 204;
        }
        return 200 '{}';
        add_header Content-Type application/json;
    }

    # Mock user deletion endpoint
    location ~ /admin/realms/open-products-facts/users/(.+) {
        return 204;
    }

    # Mock JWKS endpoint
    location /realms/open-products-facts/protocol/openid-connect/certs {
        return 200 '{"keys": []}';
        add_header Content-Type application/json;
    }

    # Default response for any other Keycloak endpoints
    location / {
        return 200 '{"status": "mock"}';
        add_header Content-Type application/json;
    }
}
